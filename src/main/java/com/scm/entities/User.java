package com.scm.entities;import jakarta.persistence.*;import lombok.*;import org.springframework.security.core.GrantedAuthority;import org.springframework.security.core.authority.SimpleGrantedAuthority;import org.springframework.security.core.userdetails.UserDetails;import java.util.*;@Entity(name="user")@Table(name = "users")@Getter@Setter@AllArgsConstructor@NoArgsConstructor@Builderpublic class User implements UserDetails {    @Id    private String userId;    private String name;    private String password;    private String email;    private String about;    private String profilePic;    private String phoneNumber;    @Getter(value=AccessLevel.NONE)    private boolean enabled=false;    private boolean emailVerified=false;    private boolean phoneVerified=false;    @Enumerated(value=EnumType.STRING)    private Providers provider=Providers.SELF;    private String providerUserId;    @OneToMany(mappedBy = "user",cascade = CascadeType.ALL,fetch=FetchType.LAZY,orphanRemoval = true)    private List<Contact> contacts=new ArrayList<>();    @ElementCollection(fetch = FetchType.EAGER)    private List<String> roleList=new ArrayList<>();    @Override    public Collection<? extends GrantedAuthority> getAuthorities() {        return roleList.stream().map(SimpleGrantedAuthority::new).toList();    }    @Override    public String getUsername() {        return this.email;    }    @Override    public boolean isAccountNonExpired() {        return true;    }    @Override    public boolean isAccountNonLocked() {        return true;    }    @Override    public boolean isCredentialsNonExpired() {        return true;    }    @Override    public boolean isEnabled() {        return this.enabled;    }    @Override    public String getPassword() {        return this.password;    }}